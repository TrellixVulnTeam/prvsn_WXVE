#!/usr/bin/python

import argparse
import logging
import sys

from prvsnlib.formatter import Formatter
from prvsnlib.provisioner import Provisioner
from prvsnlib.runbook import Runbook

from prvsnlib.utils.validation import validate_runbook, validate_roles

logging.root.setLevel(logging.INFO)

formatter = Formatter()
hdlr = logging.StreamHandler(sys.stdout)
hdlr.setFormatter(formatter)
logging.root.addHandler(hdlr)


# logFormatter = logging.Formatter("%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s")
# fileHandler = logging.FileHandler("{0}/{1}.log".format(logPath, fileName))
# fileHandler.setFormatter(logFormatter)
# rootLogger.addHandler(fileHandler)
# logging.getLogger().addHandler(logging.StreamHandler())



def main():
    parser = argparse.ArgumentParser(description='Simple machine provisioning tool.')
    parser.add_argument('-b', '--runbook', action='store', default='.', help='Path to the runbook (default: .)')
    parser.add_argument('-r', '--roles', action='store', default='', help='Roles to provision, comma-separated (default: none)')
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose output')
    parser.add_argument('command', nargs='?', default='provision', help="Command: provision(default), init, package")
    args = parser.parse_args()

    if args.verbose:
        logging.root.setLevel(logging.DEBUG)

    if args.command == 'init':
        logging.info('Initializing runbook "' + args.runbook + '"')

        runbook = Runbook('runbook', args.runbook)
        runbook.create_scaffolding()

        validate_runbook(runbook)
        validate_roles(runbook, args.roles)

    elif args.command == 'provision':
        runbook = Runbook('runbook', args.runbook)

        validate_runbook(runbook)
        validate_roles(runbook, args.roles)
        roles = args.roles.split(',')

        logging.info('Provisioning with runbook "' + runbook.path + '"')
        logging.info('Applying roles "' + '", "'.join(roles) + '"')

        Provisioner(
            runbook,
            roles
        ).run()
    else:
        logging.error('Invalid command.')
        sys.exit(1)

if __name__ == "__main__":
    main()